#!/usr/bin/env bash
set -o errtrace  # -E trap inherited in sub script
set -o errexit   # -e
set -o functrace # -T If set, any trap on DEBUG and RETURN are inherited by shell functions
set -o pipefail  # default pipeline status==last command status, If set, status=any command fail

SHB_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
cd "$SHB_DIR"

# shellcheck disable=SC1091
source "./common.bash"

# ############################################################
# 基于bash脚本的mono项目管理
# 1. 名词:workspace/project/子项目,名词等同
# 2. shb脚本为根脚本，主要是遍历多个项目执行命令，而各子项目的sha执行实际本项目命令
# 3. 项目组是相同体系规范的一组项目容器，可共享命令实现，
#    比如定义一个npm组，build命令只需要写一次就可以被所有npm项目使用，除非项目本身对build命令有其特殊实现，可覆盖之
# 4. 多项目命令的实现和执行分3个层级：shb -> 项目组-> 项目
#    比如执行'shb build'，先循环一组项目，每个项目加载其所属项目组build函数，再加载项目自己sha脚本build函数，
#    利用bash脚本后定义的函数可覆盖先定义的函数的特性，如果项目的sha脚本没有build函数实现，就执行项目组的build函数，
#    否则，执行项目自己的build函数。
# 5. 项目定义时按相对路径或绝对路径，其作为项目过滤的依据
#############################################################
declare -a __nodejs_workspaces=(
.
./packages/core
./packages/provider-tencentcloud
./packages/cli
)
declare -a __golang_workspaces=()

declare -a __all_workspaces=("${__golang_workspaces[@]}"  "${__nodejs_workspaces[@]}")

# 当前待处理的项目数组，暂时全部，回头通过脚本option 加过滤器 动态化此数组
declare -a __current_workspaces=("${__all_workspaces[@]}")

# 定义一个关联数组来存储“组”对应的默认任务加载函数
# Key: 组名 (e.g., "nodejs", "golang")
# Value: 对应的加载函数名 (e.g., "_load_group_defaults_for_nodejs")
#declare -A __group_loaders
#declare -A __group_array_names

# Usage: _sha_register_group_loader <group_name> <loader_function_name>
# 注册一个组的默认任务加载函数
#__register_group() {
#  local group_name="$1"
#  local loader_func="$2"
#  local group_array_name="$3"
#  __group_loaders["$group_name"]="$loader_func"
#  __group_array_names["$group_name"]="$group_array_name"
#}

#__register_group "all"    "_load_all_group_defaults"    "__all_workspaces"
#__register_group "nodejs" "_load_nodejs_group_defaults" "__nodejs_workspaces"
#__register_group "golang" "_load_golang_group_defaults" "__golang_workspaces"


# Usage: __execute_in_workspace <workspace> <cmd>
# 本函数做多次加载相关项目的命令集，外部执行时最好用子进程形式执行：( __execute_in_workspace "workspace" "cmd" )
__execute_in_workspace(){
  local workspace="$1"
  local cmd="$2"
  if [[ "$workspace" == "" ]]; then echo "ERROR: 缺少<workspace>参数,Usage: __execute_in_workspace <workspace> <cmd>"; fi
  if [[ "$cmd" == "" ]];     then echo "ERROR: 缺少<cmd>参数,Usage: __execute_in_workspace <workspace> <cmd>"; fi

  shift 2
  local before_load
  before_load=$(declare -f $cmd)

  cd "$workspace"


#  local group_name
#  local group_array
#  for group_name in "${!__group_array_names[@]}"; do
#      declare -n group_array="${__group_array_names[$key]}"
#      for n in "${group_array[@]}"; do
#        if [[ "$workspace" == "$n" ]]; then
#          local loader_func="${__group_loaders[$group_name]}"
#          $loader_func
#          break;
#        fi
#      done
#  done

  _load_all_group_defaults

  for n in "${__nodejs_workspaces[@]}"; do
    if [[ "$workspace" == "$n" ]]; then
      _load_nodejs_group_defaults
      break;
    fi
  done

  ## load cmd function from workspace
  if [ -f "./sha" ]; then
    . "./sha"
  fi

  local after_load
  after_load=$(declare -f "$cmd")
  # 如果cmd的函数加载前后内容相同，说明用户并为定义相关函数，则忽略执行
  if [[ "$before_load" == "$after_load" ]]; then
    echo "  ⚪️ignore 项目 $workspace 执行 $cmd, 因为您未定义[$cmd]函数实现"
    return 0
  fi
  # 执行相应的命令函数
#  echo "run: $after_load"
  $cmd "$@"
}

__for_each_workspace() {
  local workspaces_array_name="$1" # 数组名，例如 "__current_workspaces"
  local cmd="$2"
  shift # cmd保留，workspaces_array_name在本函数使用

  if [[ "$cmd" == "" ]];                       then echo "ERROR: 缺少<cmd>参数,Usage: __for_each_workspace <workspaces_array_name> <cmd> "; fi
  if [[ "$workspaces_array_name" == "" ]];     then echo "ERROR: 缺少<workspaces_array_name>参数,Usage: __for_each_workspace <workspaces_array_name> <cmd> "; fi

  local -n workspaces="$workspaces_array_name" # Bash 4.3+ nameref
  local workspace;
  for workspace in "${workspaces[@]}"; do
    # 用()建立子进程，执行时互不干扰
    (
        echo "🟪 workspace: $workspace"
        __execute_in_workspace "$workspace" "$@"
    )
  done
}


##########################################
# app cmd script
# 以下为应用的任务脚本
##########################################

#############################################################
## workspaces级别的任务集(可全局>组>workspace 覆盖实现)
#############################################################

exec() {           __for_each_workspace __current_workspaces "exec"      "$@";}
clean() {          __for_each_workspace __current_workspaces "clean"     "$@";}
clean_all() {      __for_each_workspace __current_workspaces "clean_all" "$@";}
install() {        __for_each_workspace __current_workspaces "install"   "$@";}
build() {          __for_each_workspace __current_workspaces "build"     "$@";}
pack() {           __for_each_workspace __current_workspaces "pack"      "$@";}
test() {           __for_each_workspace __current_workspaces "test"      "$@";}
reinstall() {      __for_each_workspace __current_workspaces "reinstall" "$@";}
rebuild() {        __for_each_workspace __current_workspaces "rebuild"   "$@";}
retest() {         __for_each_workspace __current_workspaces "retest"    "$@";}
repack() {         __for_each_workspace __current_workspaces "repack"    "$@";}
info() {         __for_each_workspace __current_workspaces "info"    "$@";}

#############################################################
## 任务的默认实现
#############################################################

# 全局，所有workspace的默认任务/命令集
# 任务的覆盖顺序为：全局>组>workspace
_load_all_group_defaults() {
  exec() { _run "$@"; }
  clean() {         _run rm -rf build dist out ;}
  clean_all() {     _run rm -rf build dist out node_modules pnpm-lock.yaml;}
}


#############################################################
## 其他任务
#############################################################

npmjs() {
  login() {
    # 指定--registry防止登陆跳转到镜像网站
    npm login --registry=https://registry.npmjs.org/
  }
}


version() {
  info() { npm version --workspaces "$@"; }
  patch() { npm version patch --workspaces "$@"; }
  prerelease() { npm version prerelease --workspaces "$@";}
  push() {  git push origin --tags  "$@" ; }
}

pref() {
  hello() {
    # 生成的 ./*.cpuprofile 文件
    #    Chrome 浏览器 > 打开开发者工具 > 导航到 "Performance" (性能) 面板 > 点击面板左上角加载图标 (一个向上的箭头)
    #。      >  加载生成的.cpuprofile文件
    node --cpu-prof "$(which pnpm)" run echo
  }
}


#############################################################
## 脚本入口
#############################################################

# 守卫语句，当'source ./sha'执行，脚本被当类库导入时，$0为bash或zsh等值
# 即当类库引用时不执行后续命令式入口代码
if [[ "${BASH_SOURCE[0]}" != "$0" ]]; then
  echo 'shb脚本为mono项目脚本，不能作为类库导入，只能命令式执行'
  exit 1
fi

# 当脚本被直接执行的入口代码
sha "$@"
