#!/usr/bin/env bash
#!/usr/bin/env bash
# shellcheck disable=SC2317
set -o errtrace  # -E trap inherited in sub script
set -o errexit   # -e
set -o functrace # -T If set, any trap on DEBUG and RETURN are inherited by shell functions
set -o pipefail  # default pipeline status==last command status, If set, status=any command fail


CLI_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
cd "$CLI_DIR"

# shellcheck disable=SC1091
source "../../common.bash"

# 按项目组复用command
_load_nodejs_group_defaults


##########################################
# app cmd script
# 独立于项目组的特殊命令
##########################################

builds() {
  # bun build main.ts --outfile dist/index.js
  all() {
    clean
    mkdir -p ./dist
#    _run npx tsc --noEmit
    _run bun build --root ./src --outdir=./dist --sourcemap=linked --format=esm --target=node --entry-as-name src/index.ts

#    npm install --save-dev esbuild



    # 构建 Composite 项目 (带有 references 时推荐): tsc --build 或 tsc -b。这是用于协调 Monorepo 中 Composite 项目构建的命令。
    # 它会读取 tsconfig.json 并根据 composite 和 references 来决定做什么（包括检查依赖、使用 .tsbuildinfo、生成 .js 和/或 .d.ts）。
    # 这是在 Monorepo 中构建子项目的推荐命令。
    _run  pnpm exec  tsc --build  ./tsconfig.build.json

    _run bun pm pack --destination=./build/
    _run tar -xzf ./build/*.tgz -C "./build"
  }
  exe() { bun build --compile --outfile ./dist/pa ./src/index.ts;}
  lib() {
    bun build ./src/index.ts --outdir ./dist
    bunx tsc --emitDeclarationOnly --declaration --project tsconfig.json
  }
}

publish() {
  dry-run() {
    npm pack
    pnpm publish --dry-run --registry=https://registry.npmjs.org/
  }

   #npm publish --workspaces
#  npm version patch: 增加补丁版本号（例如从 1.0.0 到 1.0.1）。
#  npm version minor: 增加次要版本号（例如从 1.0.0 或 1.1.0 到 1.2.0）。
#  npm version major: 增加主要版本号（例如从 1.0.0 或 1.x.y 到 2.0.0）。  npm version patch
  real() {
    pnpm publish --registry=https://registry.npmjs.org/
  }
}


##########################################
# app 入口
##########################################
# 守卫语句，本脚本如果作为lib导入使用则不再执行后续命令入口代码
# - 当本脚本作为命令被执行时'$ ./sha', $0为'./sha,
# - 当本脚本当作类库导入时即: '. ./sha'，$0值为bash/zsh等
if [[ "${BASH_SOURCE[0]}" != "$0" ]]; then
  return 0
fi

# 命令式执行的入口代码, 即'$ ./sha' 而不是'. ./sha'
sha "$@"
