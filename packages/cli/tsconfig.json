{
  "extends": "../../tsconfig.json",
  // 继承根目录的共享配置
  "compilerOptions": {
    // **必需**：表明这是一个 Composite Project，可以被其他项目引用，并支持增量构建
    "composite": true,
    // 生成模块代码的规范。NodeNext (或 ESNext) 与 Bun 的 ESM 模块系统对齐。
    "outDir": "./dist",
    // 编译输出目录。将编译后的 JS 和 .d.ts 文件放入 dist 文件夹。
    "rootDir": "./src",
    //====. 配置 @/a/b 形式 替代 ../a/b
    //确保 moduleResolution 设置为与 Bun 兼容的值，例如 'bundler' 或 'node16'/'nodenext'
    "baseUrl": ".",
    // 必须设置 baseUrl，paths 是相对于 baseUrl 解析的
    "paths": {
      // 将 "@/" 开头的路径映射到 "./src/" 目录
      "@/*": [
        "./src/*"
      ],
//      "@pa/core": [
//        "../core/src"
//      ]
    }
  },
  "include": [
    "src/**/*",
    // 告诉 TypeScript 编译器需要包含哪些文件进行编译。这里包含了 src 目录下所有文件和子目录。
    "examples/**/*"
    // 告诉 TypeScript 编译器需要包含哪些文件进行编译。这里包含了 src 目录下所有文件和子目录。
  ],
  "exclude": [
    "node_modules",
    // 排除 node_modules 目录，通常不需要编译依赖库。
    "dist",
    // 排除输出目录，避免重复编译或错误引用。
    "**/*.test.ts",
    // 可选：排除测试文件，如果你的测试文件在 src 目录下且以 .test.ts 结尾。
    "**/*.spec.ts"
    // 可选：排除测试文件，如果你的测试文件在 src 目录下且以 .spec.ts 结尾。
  ],
  "references": [
    // 如果 package-a 自己依赖 Monorepo 中的其他项目，在这里引用它们
    // 例如：{"path": "../package-c"}
    {
      "path": "../core"
    }
  ]
}