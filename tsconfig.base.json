// build阶段 配置
/*
参考：
- 已写好的基础配置，可直接extends: https://github.com/tsconfig/bases
- https://github.com/microsoft/TypeScript
- tsc -h 只列出部分参数，全部参数参考: https://www.typescriptlang.org/docs/handbook/compiler-options.html
*/
{
  "$schema": "https://json.schemastore.org/tsconfig",

  "compilerOptions": {
    /**********************************************************************************
    ## 子项目必须自行配置的，tsconfig.base.json 设置无意义或混乱的

    以下所有和相对目录的选项在base里设置只会造成混乱，因为base的里的相对目录是相对根目录

    - baseUrl和paths
      - 必须子项目自行设置,paths基于baseUrl,如果子项目继承使用根目录base config的baseUrl和paths,就会在子项目的目录里找packages目录，会失败.
    - tsBuildInfoFile
    - rootDir
    - outDir

    下面都是子项目可以继承的
    ***********************************************************************************/

    /**********************************************************************************

    ## module 选项
    ***********************************************************************************/
    // 允许项目被references
    "composite": true,
//    // 本配置默认先被dev环境继承，即各子项目的：./tsconfig.json，不需要build，只开发使用
//    "noEmit": true,

    "allowImportingTsExtensions": true,
    "emitDeclarationOnly": true,
    "declaration": true,
    // 启用 ES Modules 与 CommonJS 的互操作
    // 当 esModuleInterop 设置为 true 时，TypeScript 编译后的代码会处理好 ES Modules 和 CommonJS 模块之间的差异，让默认导入正常工作。
    "esModuleInterop": true,
    //    "types": [
    //      "vitest/importMeta"
    //    ],
    /*
    ## Bundler mode
    */
    // Node.js 项目：如果使用 CommonJS，选 node；如果使用 ES Modules，选 node16 或 nodenext。
    // 前端项目：使用打包工具时，选 bundler。
    // 旧项目：可以考虑 classic，不过建议升级到现代解析策略。
    "moduleResolution": "nodenext",
    // 生成模块代码的规范。NodeNext (或 ESNext) 与 Bun 的 ESM 模块系统对齐。
    "module": "NodeNext",
    "target": "es2022",
    // 同: /// <reference lib="ES2022" />
    // 取值：https://github.com/microsoft/TypeScript/tree/main/src/lib
    "lib": [
      "ES2022"
    ],
    /*
    ## lint
    */
    // 开启 strict: true 能让 TypeScript 编译器执行更严格的类型检查，如 strictNullChecks、strictFunctionTypes 等


    /**********************************************************************************
    ## lint , 编译约束
    ***********************************************************************************/

    "useUnknownInCatchVariables":true,
    "strict": true,
    "skipLibCheck": true,
    // 在不同操作系统里，文件系统对文件名大小写的处理方式不同，像 Windows 不区分大小写，而 Linux 和 macOS 区分。
    // 这个配置项能确保在 TypeScript 项目里，引用文件时使用的文件名大小写与实际文件一致，避免因大小写不一致引发的问题。
    "forceConsistentCasingInFileNames": true,

    /**********************************************************************************
    ## debug use
    ***********************************************************************************/

    "traceResolution": false

  }
}